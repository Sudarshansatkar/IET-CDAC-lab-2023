import java.util.function.BiFunction;

// Method reference to a static method of a class

// user defined functional interface
@FunctionalInterface
interface Demo
{
	public int calculate(int a,int b);
}


class TestMath
{
	public static int addition(int a,int b)
	{
		return a + b;
	}
	
	
	public static int subtraction(int a,int b)
	{
		return a - b;
	}
	
	public static int division(int a,int b)
	{
		return a / b;
	}
	
	public static int multiply(int a,int b)
	{
		return a * b;
	}
}



// We have directly called methods with the help of class name

/*
public class Day19_2 {

	public static void main(String[] args) 
	{
		System.out.println("Add result = "+TestMath.addition(20, 15));
		System.out.println("Sub result = "+TestMath.subtraction(5, 3));
		System.out.println("Div result = "+TestMath.division(30, 3));
		System.out.println("Mul result = "+TestMath.multiply(5,5));
		
	}
}

*/


/*
public class Day19_2 {

	public static void main(String[] args) 
	{
		Demo ref = TestMath::addition;
		System.out.println("Reference = "+ref);
		System.out.println(ref.calculate(90,60));
		
		ref = TestMath::subtraction;
		System.out.println("Reference = "+ref);
		System.out.println(ref.calculate(80,30));
		
		ref = TestMath::multiply;
		System.out.println("Reference = "+ref);
		System.out.println(ref.calculate(7,6));
		
		ref = TestMath::division;
		System.out.println("Reference = "+ref);
		System.out.println(ref.calculate(70,5));
		
		
		
	}
	
}
*/



public class Day19_2 {

	public static void main(String[] args) 
	{
		BiFunction<Integer,Integer,Integer> ref = TestMath::addition;
		int result = ref.apply(5,4);
		System.out.println("Result = "+result);
		
		
		ref = TestMath::subtraction;
		result = ref.apply(15,12);
		System.out.println("Result = "+result);
		
		
		ref = TestMath::multiply;
		result = ref.apply(9,8);
		System.out.println("Result = "+result);
		
		
		ref = TestMath::division;
		result = ref.apply(90,3);
		System.out.println("Result = "+result);
		
		
	}

}




